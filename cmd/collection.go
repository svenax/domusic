package cmd

import (
	"fmt"
	"io/ioutil"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/spf13/cobra"
)

const collectionHeader = `%% Generated by domusic

\header {
    title = "{{.title}}"
}

\paper {
    tocItemMarkup = \tocItemWithDotsMarkup
}
\layout {
    \context {
        \Score
        \autoPageBreaksOff
    }
}

\markuplist \table-of-contents

\pageBreak

%% The tunes
`

var titleRx = regexp.MustCompile("title\\s*=\\s*\"(.+)\"")

var collectionCmd = &cobra.Command{
	Use:   "collection files...",
	Short: "Generate a collection document given a number of files",
	Run: func(cmd *cobra.Command, args []string) {
		title, _ := cmd.Flags().GetString("title")
		data := map[string]interface{}{
			"title": title,
		}

		header, err := executeTemplate(collectionHeader, data)
		errExit(err)

		for _, arg := range args {
			files := []string{arg}
			if strings.Contains(arg, "*") {
				files, _ = filepath.Glob(pathFromRoot(arg))
			}
			for _, f := range files {
				fd, err := ioutil.ReadFile(getSourcePath(f))
				errExit(err)
				title := titleRx.FindSubmatch(fd)[1]
				header += fmt.Sprintf("\\tocItem \\markup \"%s\"\n", title)
				header += fmt.Sprintf("\\include \"%s\"\n\n", f)
			}
		}

		fmt.Println(header)
	},
}

func init() {
	rootCmd.AddCommand(collectionCmd)

	collectionCmd.Flags().StringP("title", "t", "Collection", "collection title")
}
