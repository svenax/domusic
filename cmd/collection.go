package cmd

import (
	"fmt"
	"io/ioutil"
	"path/filepath"
	"regexp"
	"sort"
	"strings"

	"github.com/spf13/cobra"
)

const collectionHeader = `%% Generated by domusic

\header {
    title = "{{.title}}"
}

\paper {
    tocItemMarkup = \tocItemWithDotsMarkup
}
\layout {
    \context {
        \Score
        \autoPageBreaksOff
    }
}

\markuplist \table-of-contents

\pageBreak

%% The tunes
`

var titleRx = regexp.MustCompile("title\\s*=\\s*\"(.+)\"")

var collectionCmd = &cobra.Command{
	Use:   "collection files...",
	Short: "Generate a collection document given a number of files",
	Run: func(cmd *cobra.Command, args []string) {
		title, _ := cmd.Flags().GetString("title")
		data := map[string]interface{}{
			"title": title,
		}

		template, err := executeTemplate(collectionHeader, data)
		errExit(err)

		files := []string{}
		for _, arg := range args {
			if strings.Contains(arg, "*") {
				f, _ := filepath.Glob(pathFromRoot(arg))
				files = append(files, f...)
			} else {
				files = append(files, arg)
			}
		}

		sort.Slice(files, func(i, j int) bool {
			return pathForSort(files[i]) < pathForSort(files[j])
		})

		for _, f := range files {
			fd, err := ioutil.ReadFile(getSourcePath(f))
			errExit(err)
			title := titleRx.FindSubmatch(fd)[1]
			template += fmt.Sprintf("\\tocItem \\markup \"%s\"\n", title)
			template += fmt.Sprintf("\\include \"%s\"\n\n", f)
		}

		fmt.Println(template)
	},
}

func init() {
	rootCmd.AddCommand(collectionCmd)

	collectionCmd.Flags().StringP("title", "t", "Collection", "collection title")
}

func pathForSort(path string) string {
	return strings.Replace(filepath.Base(path), "!", "", -1)
}
